{
    "Error Size": 1,
    "Error Specification": [
        {
            "Error Type": "DFP",
            "Original Code": "void concatenate2d_1(hls::stream<input1_T> &data1, hls::stream<input2_T> &data2, hls::stream<res_T> &res) {\nConcatLoopHeight:\nfor (int i = 0; i < CONFIG_T::n_elem1_0; i++) {\n#pragma HLS PIPELINE II=1\n\ninput1_T in_data1 = data1.read();\ninput2_T in_data2 = data2.read();\nres_T out_data;\nPRAGMA_DATA_PACK(out_data)\n\nConcatPackInput1:\nfor (int k = 0; k < input1_T::size; k++) {\n#pragma HLS UNROLL\nout_data[k] = in_data1[k];\n}\n\nConcatPackInput2:\nfor (int k = 0; k < input2_T::size; k++) {\n#pragma HLS UNROLL\nout_data[input1_T::size + k] = in_data2[k];\n}\n\nres.write(out_data);\n}\n}\n",
            "Faulty Code": "void concatenate2d_1(hls::stream<input1_T> &data1, hls::stream<input2_T> &data2, hls::stream<res_T> &res) {\nConcatLoopHeight:\nfor (int i = 0; i < CONFIG_T::n_elem1_0; i++) {\n#pragma HLS PIPELINE II=1\n\ninput1_T in_data1 = data1.read();\ninput2_T in_data2 = data2.read();\nres_T out_data;\nPRAGMA_DATA_PACK(out_data)\n\n#pragma HLS dataflow\nConcatPackInput1:\nfor (int k = 0; k < input1_T::size; k++) {\n#pragma HLS UNROLL\nout_data[k] = in_data1[k];\n}\n\nConcatPackInput2:\nfor (int k = 0; k < input2_T::size; k++) {\n#pragma HLS UNROLL\nout_data[input1_T::size + k] = in_data2[k];\n}\n\nres.write(out_data);\n}\n}\n"
        }
    ]
}