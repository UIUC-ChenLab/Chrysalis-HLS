{
    "Error Size": 1,
    "Error Specification": [
        {
            "Error Type": "MLP",
            "Original Code": "\"\"\"void\r\nsha_update (const BYTE * buffer, int count)\r\n{\r\nif ((sha_info_count_lo + ((INT32) count << 3)) < sha_info_count_lo)\r\n{\r\n++sha_info_count_hi;\r\n}\r\nsha_info_count_lo += (INT32) count << 3;\r\nsha_info_count_hi += (INT32) count >> 29;\r\nwhile (count >= SHA_BLOCKSIZE)\r\n{\r\nlocal_memcpy (sha_info_data, buffer, SHA_BLOCKSIZE);\r\nsha_transform ();\r\nbuffer += SHA_BLOCKSIZE;\r\ncount -= SHA_BLOCKSIZE;\r\n}\r\nlocal_memcpy (sha_info_data, buffer, count);\r\n}\"\"\"",
            "Faulty Code": "\"\"\"void\r\nsha_update (const BYTE * buffer, int count)\r\n{\r\n#pragma HLS pipeline\r\nif ((sha_info_count_lo + ((INT32) count << 3)) < sha_info_count_lo)\r\n{\r\n#pragma HLS pipeline\r\n++sha_info_count_hi;\r\n}\r\nsha_info_count_lo += (INT32) count << 3;\r\nsha_info_count_hi += (INT32) count >> 29;\r\nwhile (count >= SHA_BLOCKSIZE)\r\n{\r\n#pragma HLS pipeline\r\nlocal_memcpy (sha_info_data, buffer, SHA_BLOCKSIZE);\r\nsha_transform ();\r\nbuffer += SHA_BLOCKSIZE;\r\ncount -= SHA_BLOCKSIZE;\r\n}\r\n#pragma HLS pipeline\r\nlocal_memcpy (sha_info_data, buffer, count);\r\n}\"\"\""
        }
    ]
}