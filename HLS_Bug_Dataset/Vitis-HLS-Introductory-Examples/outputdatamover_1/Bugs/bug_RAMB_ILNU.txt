{
    "Error Size": 2,
    "Error Specification": [
        {
            "Error Type": "RAMB",
            "Original Code": "void read(A* a_in, A buf_out[NUM]) {\nREAD:\n    for (int i = 0; i < NUM; i++) {\n        buf_out[i] = a_in[i];\n    }\n}",
            "Faulty Code": "void read(A* a_in, A buf_out[NUM]) {\n    #pragma HLS interface m_axi port=a_in offset=slave\nREAD:\n    for (int i = 0; i < NUM; i++) {\n        buf_out[i] = a_in[i];\n    }\n}"
        },
        {
            "Error Type": "ILNU",
            "Original Code": "void write(hls::burst_maxi<dout_t> RES, dout_t x_aux[N], dout_t y_aux[N]) {\n    RES.write_request(\n        0, N / 4); // request to write N/4 elements from the first element\n    RES.write_request(\n        N - N / 4,\n        N / 4); // request to write N/4 elements from the last quarter element\n\n    for (int i = 0; i < N / 2; i++) {\n        if (i < N / 4)\n            RES.write(x_aux[i] - y_aux[i]);\n        else\n            RES.write(x_aux[N - N / 2 + i] - y_aux[N - N / 2 + i] / N);\n    }\n    RES.write_response(); // wait for the write operation to complete\n    RES.write_response(); // wait for the write operation to complete\n}",
            "Faulty Code": "void write(hls::burst_maxi<dout_t> RES, dout_t x_aux[N], dout_t y_aux[N]) {\n    #pragma HLS unroll factor=2\n    RES.write_request(\n        0, N / 4); // request to write N/4 elements from the first element\n    RES.write_request(\n        N - N / 4,\n        N / 4); // request to write N/4 elements from the last quarter element\n\n    for (int i = 0; i < N / 2; i++) {\n        if (i < N / 4)\n            RES.write(x_aux[i] - y_aux[i]);\n        else\n            RES.write(x_aux[N - N / 2 + i] - y_aux[N - N / 2 + i] / N);\n    }\n    RES.write_response(); // wait for the write operation to complete\n    RES.write_response(); // wait for the write operation to complete\n}"
        }
    ]
}