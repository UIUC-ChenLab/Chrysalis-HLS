{
    "Error Size": 1,
    "Error Specification": [
        {
            "Error Type": "MLP",
            "Original Code": "void global_max_pool(int num_nodes,\n                     int num_edges,\n                     T node_embedding_table[MAX_NODES][EMB_SIZE],\n                     T pooled_embedding[EMB_SIZE])\n{\n#pragma HLS INLINE off\n\n    max_incremental_data<T> max_agg[EMB_SIZE];\n    for (int i = 0; i < num_nodes; i++)\n    {\n#pragma HLS loop_tripcount min = 1 max = NUM_NODES_GUESS\n        for (int j = 0; j < EMB_SIZE; j++)\n        {\n            max_incremental_update(max_agg[j], node_embedding_table[i][j]);\n        }\n    }\n    for (int i = 0; i < EMB_SIZE; i++)\n    {\n        max_incremental_finalize(max_agg[i]);\n    }\n    for (int i = 0; i < EMB_SIZE; i++)\n    {\n        pooled_embedding[i] = max_agg[i].max;\n    }\n}\n\n// Content of called function\nvoid max_incremental_finalize(max_incremental_data<T> &data)\n{\n    // #pragma HLS INLINE off\n    data.finalized = true;\n}\n\n// Content of called function\nvoid max_incremental_update(max_incremental_data<T> &data, T x)\n{\n    // #pragma HLS INLINE off\n    if (data.one_sample_processed == false)\n    {\n        data.max = x;\n        data.one_sample_processed = true;\n    }\n    else\n    {\n        if (x > data.max)\n        {\n            data.max = x;\n        }\n    }\n}",
            "Faulty Code": "void global_max_pool(int num_nodes,\n                     int num_edges,\n                     T node_embedding_table[MAX_NODES][EMB_SIZE],\n                     T pooled_embedding[EMB_SIZE])\n{\n#pragma HLS INLINE off\n\n    max_incremental_data<T> max_agg[EMB_SIZE];\n    for (int i = 0; i < num_nodes; i++)\n    {\n#pragma HLS pipeline // Incorrect placement\n#pragma HLS loop_tripcount min = 1 max = NUM_NODES_GUESS\n        for (int j = 0; j < EMB_SIZE; j++)\n        {\n#pragma HLS pipeline // Incorrect nested pipeline\n            max_incremental_update(max_agg[j], node_embedding_table[i][j]);\n        }\n    }\n    for (int i = 0; i < EMB_SIZE; i++)\n    {\n        max_incremental_finalize(max_agg[i]);\n    }\n    for (int i = 0; i < EMB_SIZE; i++)\n    {\n        pooled_embedding[i] = max_agg[i].max;\n    }\n}\n\n// Content of called function\nvoid max_incremental_finalize(max_incremental_data<T> &data)\n{\n    // #pragma HLS INLINE off\n    data.finalized = true;\n}\n\n// Content of called function\nvoid max_incremental_update(max_incremental_data<T> &data, T x)\n{\n    // #pragma HLS INLINE off\n    if (data.one_sample_processed == false)\n    {\n        data.max = x;\n        data.one_sample_processed = true;\n    }\n    else\n    {\n        if (x > data.max)\n        {\n            data.max = x;\n        }\n    }\n}"
        }
    ]
}