{
    "Error Size": 1,
    "Error Specification": [
        {
            "Error Type": "MLP",
            "Original Code": "void gather_node_neighbors_and_edge_indices(\n    int node,\n    int node_in_degree,\n    int node_neighbors[MAX_NODES],\n    int node_edge_indices[MAX_NODES],\n    int neightbor_table_offsets[MAX_NODES],\n    int neighbor_table[MAX_EDGES],\n    int edge_index_table[MAX_EDGES])\n{\n    int node_offset = neightbor_table_offsets[node];\n    for (int i = 0; i < node_in_degree; i++)\n    {\n#pragma HLS loop_tripcount min = 1 max = DEGREE_GUESS\n        int current_idx = node_offset + i;\n        node_neighbors[i] = neighbor_table[current_idx];\n        node_edge_indices[i] = edge_index_table[current_idx];\n    }\n}\n",
            "Faulty Code": "void gather_node_neighbors_and_edge_indices(\n    int node,\n    int node_in_degree,\n    int node_neighbors[MAX_NODES],\n    int node_edge_indices[MAX_NODES],\n    int neightbor_table_offsets[MAX_NODES],\n    int neighbor_table[MAX_EDGES],\n    int edge_index_table[MAX_EDGES])\n{\n    int node_offset = neightbor_table_offsets[node];\n    for (int i = 0; i < node_in_degree; i++)\n    {\n#pragma HLS PIPELINE\n        int current_idx = node_offset + i;\n        node_neighbors[i] = neighbor_table[current_idx];\n        node_edge_indices[i] = edge_index_table[current_idx];\n    }\n}\n"
        }
    ]
}