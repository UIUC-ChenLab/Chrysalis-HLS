{
    "Error Size": 1,
    "Error Specification": [
        {
            "Error Type": "OOB",
            "Original Code": "\"\"\"void multiply(hls::stream<input1_T> &data1, hls::stream<input2_T> &data2, hls::stream<res_T> &res) {\n    assert(input1_T::size == input2_T::size && input1_T::size == res_T::size);\n\nMultiplyLoop:\n    for (int i = 0; i < CONFIG_T::n_elem / input1_T::size; i++) {\n        #pragma HLS PIPELINE II=CONFIG_T::reuse_factor\n\n        input1_T in_data1 = data1.read();\n        input2_T in_data2 = data2.read();\n        res_T out_data;\n        PRAGMA_DATA_PACK(out_data)\n\n    MultiplyPack:\n        for (int j = 0; j < res_T::size; j++) {\n            #pragma HLS UNROLL\n            out_data[j] = in_data1[j] * in_data2[j];\n        }\n\n        res.write(out_data);\n    }\n}\"\"\"",
            "Faulty Code": "\"\"\"void multiply(hls::stream<input1_T> &data1, hls::stream<input2_T> &data2, hls::stream<res_T> &res) {\n    assert(input1_T::size == input2_T::size && input1_T::size == res_T::size);\n\nMultiplyLoop:\n    for (int i = 0; i < CONFIG_T::n_elem / input1_T::size; i++) {\n        #pragma HLS PIPELINE II=CONFIG_T::reuse_factor\n\n        input1_T in_data1 = data1.read();\n        input2_T in_data2 = data2.read();\n        res_T out_data;\n        PRAGMA_DATA_PACK(out_data)\n\n    MultiplyPack:\n        for (int j = 0; j <= res_T::size; j++) {\n            #pragma HLS UNROLL\n            out_data[j] = in_data1[j] * in_data2[j];\n        }\n\n        res.write(out_data);\n    }\n}\"\"\""
        }
    ]
}