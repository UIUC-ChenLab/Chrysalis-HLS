{
    "Error Size": 1,
    "Error Specification": [
        {
            "Error Type": "RAMB",
            "Original Code": "\"\"\"void prelu(hls::stream<data_T> &data, typename data_T::value_type alpha[CONFIG_T::n_in], hls::stream<res_T> &res) {\nPReLUActLoop:\nfor (int i = 0; i < CONFIG_T::n_in / res_T::size; i++) {\n#pragma HLS PIPELINE\n\ndata_T in_data = data.read();\nres_T out_data;\nPRAGMA_DATA_PACK(out_data)\n\nPReLUPackLoop:\nfor (int j = 0; j < res_T::size; j++) {\n#pragma HLS UNROLL\nif (in_data[j] > 0)\nout_data[j] = in_data[j];\nelse\nout_data[j] = alpha[i * res_T::size + j] * in_data[j];\n}\nres.write(out_data);\n}\n}\"\"\"",
            "Faulty Code": "\"\"\"void prelu(hls::stream<data_T> &data, typename data_T::value_type alpha[CONFIG_T::n_in], hls::stream<res_T> &res) {\n#pragma HLS interface m_axi port=alpha\nPReLUActLoop:\nfor (int i = 0; i < CONFIG_T::n_in / res_T::size; i++) {\n#pragma HLS PIPELINE\n\ndata_T in_data = data.read();\nres_T out_data;\nPRAGMA_DATA_PACK(out_data)\n\nPReLUPackLoop:\nfor (int j = 0; j < res_T::size; j++) {\n#pragma HLS UNROLL\nif (in_data[j] > 0)\nout_data[j] = in_data[j];\nelse\nout_data[j] = alpha[i * res_T::size + j] * in_data[j];\n}\nres.write(out_data);\n}\n}\"\"\""
        }
    ]
}