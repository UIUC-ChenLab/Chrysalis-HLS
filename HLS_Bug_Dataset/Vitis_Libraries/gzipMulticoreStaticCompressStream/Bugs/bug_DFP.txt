{
    "Error Size": 1,
    "Error Specification": [
        {
            "Error Type": "DFP",
            "Original Code": "void lz77CompressStatic(hls::stream<IntVectorStream_dt<8, 1> >& inStream,\n                        hls::stream<IntVectorStream_dt<9, 1> >& lz77Out) {\n#pragma HLS dataflow\n    hls::stream<IntVectorStream_dt<32, 1> > compressedStream(\"compressedStream\");\n    hls::stream<IntVectorStream_dt<32, 1> > compressedStream1(\"compressedStream1\");\n    hls::stream<IntVectorStream_dt<32, 1> > boosterStream(\"boosterStream\");\n#pragma HLS STREAM variable = compressedStream depth = 4\n#pragma HLS STREAM variable = compressedStream1 depth = 4\n#pragma HLS STREAM variable = boosterStream depth = 4\n\n    xf::compression::lzCompress<MAX_BLOCK_SIZE, uint32_t, MATCH_LEN, MIN_MATCH, LZ_MAX_OFFSET_LIMIT, CORE_ID>(\n        inStream, compressedStream);\n    xf::compression::lzBestMatchFilter<MATCH_LEN, LZ_MAX_OFFSET_LIMIT>(compressedStream, compressedStream1);\n    xf::compression::lzBooster<MAX_MATCH_LEN, MAX_BLOCK_SIZE>(compressedStream1, boosterStream);\n    xf::compression::lz77DivideStatic(boosterStream, lz77Out);\n}",
            "Faulty Code": "void lz77CompressStatic(hls::stream<IntVectorStream_dt<8, 1> >& inStream,\n                        hls::stream<IntVectorStream_dt<9, 1> >& lz77Out) {\n    hls::stream<IntVectorStream_dt<32, 1> > compressedStream(\"compressedStream\");\n    hls::stream<IntVectorStream_dt<32, 1> > compressedStream1(\"compressedStream1\");\n    hls::stream<IntVectorStream_dt<32, 1> > boosterStream(\"boosterStream\");\n#pragma HLS STREAM variable = compressedStream depth = 4\n#pragma HLS STREAM variable = compressedStream1 depth = 4\n#pragma HLS STREAM variable = boosterStream depth = 4\n#pragma HLS dataflow\n    xf::compression::lzCompress<MAX_BLOCK_SIZE, uint32_t, MATCH_LEN, MIN_MATCH, LZ_MAX_OFFSET_LIMIT, CORE_ID>(\n        inStream, compressedStream);\n    xf::compression::lzBestMatchFilter<MATCH_LEN, LZ_MAX_OFFSET_LIMIT>(compressedStream, compressedStream1);\n    xf::compression::lzBooster<MAX_MATCH_LEN, MAX_BLOCK_SIZE>(compressedStream1, boosterStream);\n    xf::compression::lz77DivideStatic(boosterStream, lz77Out);\n}"
        }
    ]
}